// <auto-generated />
using System;
using EFCDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCDataAccess.Migrations
{
    [DbContext(typeof(ForumContextClass))]
    [Migration("20220502123039_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0-preview.3.22175.1");

            modelBuilder.Entity("Entities.Model.Comment", b =>
                {
                    b.Property<string>("CID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentCommentCID")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostUid")
                        .HasColumnType("TEXT");

                    b.Property<string>("WrittenByEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CID");

                    b.HasIndex("ParentCommentCID");

                    b.HasIndex("PostUid");

                    b.HasIndex("WrittenByEmail");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Entities.Model.ForumContainer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Forum");
                });

            modelBuilder.Entity("Entities.Model.Post", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ForumContainerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WrittenByEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Uid");

                    b.HasIndex("ForumContainerId");

                    b.HasIndex("WrittenByEmail");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Entities.Model.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ForumContainerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Email");

                    b.HasIndex("ForumContainerId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.Model.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CommentCID")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostUid")
                        .HasColumnType("TEXT");

                    b.Property<short>("Value")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VoterEmail")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommentCID");

                    b.HasIndex("PostUid");

                    b.HasIndex("VoterEmail");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Entities.Model.Comment", b =>
                {
                    b.HasOne("Entities.Model.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentCID");

                    b.HasOne("Entities.Model.Post", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostUid");

                    b.HasOne("Entities.Model.User", "WrittenBy")
                        .WithMany()
                        .HasForeignKey("WrittenByEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("WrittenBy");
                });

            modelBuilder.Entity("Entities.Model.Post", b =>
                {
                    b.HasOne("Entities.Model.ForumContainer", null)
                        .WithMany("Posts")
                        .HasForeignKey("ForumContainerId");

                    b.HasOne("Entities.Model.User", "WrittenBy")
                        .WithMany()
                        .HasForeignKey("WrittenByEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WrittenBy");
                });

            modelBuilder.Entity("Entities.Model.User", b =>
                {
                    b.HasOne("Entities.Model.ForumContainer", null)
                        .WithMany("Users")
                        .HasForeignKey("ForumContainerId");
                });

            modelBuilder.Entity("Entities.Model.Vote", b =>
                {
                    b.HasOne("Entities.Model.Comment", null)
                        .WithMany("Votes")
                        .HasForeignKey("CommentCID");

                    b.HasOne("Entities.Model.Post", null)
                        .WithMany("Votes")
                        .HasForeignKey("PostUid");

                    b.HasOne("Entities.Model.User", "Voter")
                        .WithMany()
                        .HasForeignKey("VoterEmail");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("Entities.Model.Comment", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Entities.Model.ForumContainer", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Model.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
