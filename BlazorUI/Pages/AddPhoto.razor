@page "/AddPhoto"
@page "/file-upload-1"
@using System 
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging

@inject IWebHostEnvironment Environment

<h3>Upload Files</h3>

<p>
    <label>
        Max file size:
        <input type="number" @bind="maxFileSize" />
    </label>
</p>

<p>
    <label>
        Max allowed files:
        <input type="number" @bind="maxAllowedFiles" />
    </label>
</p>

<p>
    <label>
        Upload up to @maxAllowedFiles of up to @maxFileSize bytes:
        <InputFile OnChange="@LoadFiles" multiple />
    </label>
</p>

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>
        @foreach (var file in loadedFiles)
        {
            <li>
                <ul>
                    <li>Name: @file.Name</li>
                    <li>Last modified: @file.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Size</li>
                    <li>Content type: @file.ContentType</li>
                </ul>
            </li>
        }
    </ul>
}

@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                Stream stream = file.OpenReadStream();
                var path = $"pedo.jpg";
                FileStream fs = File.Create(path);
                await stream.CopyToAsync(fs);
                fs.Close();
                stream.Close();
                
                Console.WriteLine("Hola");

                FileStream fs2 = new FileStream(path, FileMode.Open, FileAccess.Read);
                int length = Convert.ToInt32(fs2.Length);
                byte[] data = new byte[length];
                fs2.Read(data, 0, length);
                fs2.Close();
                Console.WriteLine("done");
                string base64ImageRepresentation = Convert.ToBase64String(data);
                Console.WriteLine(base64ImageRepresentation);
               // Console.WriteLine("Hola");
               
                
                /*
                loadedFiles.Add(file);
                Console.WriteLine("DOne");
                var trustedFileNameForFileStorage = Path.GetRandomFileName();
                var path = Path.Combine(Environment.ContentRootPath,
                        Environment.EnvironmentName, "unsafe_uploads",
                        trustedFileNameForFileStorage);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                */



            }
            catch (Exception ex)
            {
   
            }
        }

        isLoading = false;
    }
}