@page "/Signup"

@using Entities.Model
@using Application.Contracts
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Contracts
@inject IUserService userService
@inject NavigationManager NavMgr


<RadzenTemplateForm Data="@newUser" Submit="@((User args) => { Submit(args); })">
    <div class="row justify-content-center">
        <div class="col-md-6 big-box">
            <RadzenFieldset>
                <RadzenTabs SelectedIndex="0">
                    <Tabs>
                    <div>
                        <div class="row avatar">
                            <div class="col-md-4 align-items-center d-flex">
                                <label for="file-upload" class="custom-file-upload">
                                    <img src=@Image width="200" height="200">
                                    <InputFile id="file-upload" OnChange=@LoadFiles class="input-file" hidden=""/>
                                </label>
                            </div>
                         </div>
                        <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Name"/>
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox style="width: 100%;" Name="FirstName" @bind-Value="FName"/>
                                    <RadzenRequiredValidator Component="FirstName" Text="First name is required" Popup=true Style="position: absolute"/>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Last Name">
                                    </RadzenLabel>
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox style="width: 100%;" Name="LastName" @bind-Value="LName"/>
                                    <RadzenRequiredValidator Component="LastName" Text="Last name is required" Popup=true Style="position: absolute"/>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Email"/>
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox style="width: 100%;"  Name="Email" @bind-Value="Email" Disabled=@(LoogedIn ? true : false)/>
                                    <RadzenRequiredValidator Component="Email" Text="Email is required" Popup=true Style="position: absolute" />
                                    <RadzenEmailValidator Component="Email" Text="Provide a valid email address" Popup=true Style="position: absolute" />

                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Password"/>
                                </div>
                                <div class="col-md-8">
                                    <RadzenPassword style="display: block" Name="Password" @bind-Value=@Pwd Class="w-100" />
                                    <RadzenRequiredValidator Component="Password" Text="Enter password" Popup=true Style="position: absolute" />
                                  
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Repeat Password"/>
                                </div>
                                <div class="col-md-8">
                                    <RadzenPassword style="display: block" Name="RepeatPassword" @bind-Value=@RePwd  Class="w-100" />
                                    <RadzenRequiredValidator Component="RepeatPassword" Text="Repeat your password" Popup=true Style="position: absolute" />
                                    <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(RePwd)) Value=@Pwd Component="RepeatPassword" Text="Passwords should be the same" Popup=true Style="position: absolute" />
                                </div>
                            </div>
                        </div>
                    </Tabs>
                </RadzenTabs>
                <p class="error-label">@errorLabel</p>
            </RadzenFieldset>
        </div>

    </div>
    <div class="row justify-content-center">
        <div class="col-md-12 d-flex align-items-end justify-content-center">
            <RadzenButton ButtonType="ButtonType.Submit" Icon=@(LoogedIn ? "update" : "save") Text=@(LoogedIn ? "Update" : "Save") Disabled=@Error()/>
            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
        </div>
    </div>
</RadzenTemplateForm>



@code {
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    
    
    User newUser = new User("example", "", "", "", "");
    
    public string FName;
    public string LName;
    public string Email;
    public string Pwd;
    public string Image { get; set; } = "/images/-user-login.png";
    public string RePwd { get; set; }

    bool LoogedIn = false;
    private string errorLabel = "";

    
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        if (user.Identity == null) return;;
        
        FName = user.Identity!.Name!;
        LName = user.Claims.First(c => "lastName".Equals(c.Type)).Value;
        Email = user.Claims.First(c => "email".Equals(c.Type)).Value;
        Pwd = user.Claims.First(c => "pwd".Equals(c.Type)).Value;
        RePwd = user.Claims.First(c => "pwd".Equals(c.Type)).Value;
        Image = string.Format(user.Claims.First(c => "photo".Equals(c.Type)).Value);
        LoogedIn = true;
    }

    private async Task Submit(User arg) {
        try {
            User newUser = new User(FName, LName, Email, Pwd, Image);
            await ((LoogedIn) ? userService.UpdateUserAsync(newUser) : userService.AddUserAsync(newUser));
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
            return;
        }
        NavMgr.NavigateTo("/", forceLoad:true);
    }

    void Cancel() {
        NavMgr.NavigateTo("/", forceLoad:true);
    }

    private bool Error() {
        return !"".Equals(errorLabel);
    }
    
    /////Photo part
    

    

    private async Task LoadFiles(InputFileChangeEventArgs e) {
        
        IBrowserFile myFile = e.File;

        try
        {
            Stream stream = myFile.OpenReadStream();
            string path  = $"wwwroot/images/temp/{e.File.Name}";
            FileStream fs = File.Create(path); //Fix this please
            await stream.CopyToAsync(fs);
            fs.Close();
            stream.Close();
            
            FileStream fs2 = new FileStream(path, FileMode.Open, FileAccess.Read);
            int length = Convert.ToInt32(fs2.Length);
            byte[] data = new byte[length];
            fs2.Read(data, 0, length);
            fs2.Close();
            Console.WriteLine("done");
            string base64ImageRepresentation = Convert.ToBase64String(data);
            Console.WriteLine(base64ImageRepresentation);
            Image = string.Format("data:image/jpeg;base64,{0}", base64ImageRepresentation);
        }
        catch (Exception ex)
        { }
        
}

}