@page "/Signup"

@using Entities.Model
@using Application.Contracts
@using Microsoft.AspNetCore.Components
@inject IUserDAO userDao
@inject NavigationManager NavMgr


<RadzenTemplateForm Data="@newUser" Submit="@((User args) => { Submit(args); })">
    <div class="row justify-content-center">
        <div class="col-md-6 big-box">
            <RadzenFieldset Text="Contact Info">
                <RadzenTabs SelectedIndex="0">
                    <Tabs>
                        <div>
                            <div class="row avatar">
                                <div class="col-md-4 align-items-center d-flex">
                                    <img src="/images/-user-login.png" width="200" height="200">
                                    @* <div class="file-input-zone"> *@
                                        @* change *@
                                        <InputFile OnChange="@LoadFiles" />
                                    @* </div> *@
                                        
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Name"/>
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox style="width: 100%;" Name="Fname" @bind-Value="FName"/>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Last Name">
                                    </RadzenLabel>
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox style="width: 100%;" Name="LastName" @bind-Value="LName"/>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Email"/>
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox style="width: 100%;" Name="EMail" @bind-Value="Email"/>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Password"/>
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox style="width: 100%;" type="password" Name="Pwd" @bind-Value="Pwd"/>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="re-Password"/>
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox style="width: 100%;" type="password" Name="RePwd" @bind-Value="RePwd" Change="@Eval"/>
                                </div>
                            </div>
                        </div>
                    </Tabs>
                </RadzenTabs>
                <p class="error-label">@errorLabel</p>
            </RadzenFieldset>
        </div>

    </div>
    <div class="row justify-content-center">
        <div class="col-md-12 d-flex align-items-end justify-content-center">
            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" Disabled=@Error()/>
            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
        </div>
    </div>
</RadzenTemplateForm>



@code {
    User newUser = new User("example", "", "", "");
    public string FName;
    public string LName;
    public string Email;
    public string Pwd;
    
    public string RePwd { get; set; }
    
   /*
    List<string> Campus = new List<string>()
    {
         "Horsens",
         "Aarhus" , 
         "Viborg" 
    };
    */
    
    private string errorLabel = "";

    private async Task Submit(User arg) {
        try
        {
            User otherUser = new User(FName, LName, Email, Pwd);
            await userDao.AddUserAsync(otherUser);
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
            return;
        }
        
        NavMgr.NavigateTo("/Users");
    }

    void Cancel() {
        NavMgr.NavigateTo("/");
    }

    private async Task Eval() {
        if (!RePwd.Equals(Pwd)) {
            errorLabel = "Passwords must be equals";
        }
        else {
            errorLabel = "";
        }
    }

    private bool Error() {
        return !"".Equals(errorLabel);
    }
    
    /////Photo part
    
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private bool isLoading;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(1))
        {
            try
            {
                Stream stream = file.OpenReadStream();
                var path = $"photo.jpg";
                FileStream fs = File.Create(path);
                await stream.CopyToAsync(fs);
                fs.Close();
                stream.Close();
                
                Console.WriteLine("Hola");

                FileStream fs2 = new FileStream(path, FileMode.Open, FileAccess.Read);
                int length = Convert.ToInt32(fs2.Length);
                byte[] data = new byte[length];
                fs2.Read(data, 0, length);
                fs2.Close();
                Console.WriteLine("done");
                string base64ImageRepresentation = Convert.ToBase64String(data);
                Console.WriteLine(base64ImageRepresentation);
    // Console.WriteLine("Hola");
               
                
    /*
                loadedFiles.Add(file);
                Console.WriteLine("DOne");
                var trustedFileNameForFileStorage = Path.GetRandomFileName();
                var path = Path.Combine(Environment.ContentRootPath,
                        Environment.EnvironmentName, "unsafe_uploads",
                        trustedFileNameForFileStorage);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                */



            }
            catch (Exception ex)
            {
   
            }
        }

        isLoading = false;
    }
    
}