@page "/CreatePost"
@using Entities.Model
@using System.Security.Claims
@using Application.Contracts
@using Microsoft.AspNetCore.Components
@inject IPostDAO postDao
@inject NavigationManager navMgr
@using System.Security.Claims
@using Microsoft.AspNetCore.Mvc


<h1>WRITE YOUR POST</h1>

<AuthorizeView>
    <Authorized>
        <RadzenCard class="m-3">
            <div class="row">
                <div class="title">
                    <RadzenTextBox Placeholder="Title"@bind-Value=@title MaxLength="300" Class="w-100"/>
                </div>
                    <div class="col-7 body">
                        <RadzenHtmlEditor PlaceHolder="Text (optional)" @bind-Value=@body style="height: 500px; margin-bottom: 1rem;" Change=@OnChange Paste=@OnPaste Execute=@OnExecute/>
                    </div>
                <div class="col-4 photo-area">
                    <div>
                        <RadzenCard>
                            <h4 class="mb-4">Upload your photo</h4>
                            <RadzenFileInput @bind-Value=@postImage TValue="string" Class="w-100"
                                             Change=@(args => OnChange(args, "FileInput")) Error=@(args => OnError(args, "FileInput"))/>
                        </RadzenCard>
                    </div>    
                    <div class="submit">
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Submit" Click=@OnSend/>
                    </div>
                </div>
            </div>
      </RadzenCard>  
    </Authorized>
    <NotAuthorized>
        <p>You must be logged in to post</p>
    </NotAuthorized>
</AuthorizeView>

@code {

    private string postImage;
    private string body;
    private string title;
    private User myUser;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    private string? name;
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!; 
    
    
    protected override async Task OnInitializedAsync() {
        body = "";
        title = "";
        postImage = "";
        
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        
        string name = user.Claims.First(c => "lastName".Equals(c.Type)).Value;
        myUser = new User(user.Identity.Name,
            user.Claims.First(c => "lastName".Equals(c.Type)).Value,
            user.Claims.First(c => "email".Equals(c.Type)).Value,
            (user.Claims.First(c => "lastName".Equals(c.Type))).Value,
            user.Claims.First(c => "photo".Equals(c.Type)).Value);
    }



    async Task OnSend() {
        try {
            Post post = new Post(title, body, myUser, postImage);
            await postDao.AddPost(post);
        }
        catch (Exception e) {
            Console.WriteLine(e);
            throw;
        }

    }
    
    

    void OnPaste(HtmlEditorPasteEventArgs args) {
        string post = args.Html;
    // console.Log($"Paste: {args.Html}");
    }

    void OnChange(string html)
    {
        // console.Log($"Change: {html}");
    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        // console.Log($"Execute: {args.CommandName}");
    }
    
    void OnChange(string value, string name) {
        postImage = value;
    //  console.Log($"{name} value changed");
    }

    void OnError(UploadErrorEventArgs args, string name)
    {
        //console.Log($"{args.Message}");
    }
}