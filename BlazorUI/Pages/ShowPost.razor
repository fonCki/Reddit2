@page "/ShowPost/{postId}"
@using Entities.Model
@using Microsoft.AspNetCore.Components
@using System.Security.Claims
@using BlazorUI.Authentication
@using Contracts
@inject IPostService postService
@inject NavigationManager navMgr
@inject IAuthService authService

@if (Post != null) {
    <RadzenCard class="m-3">
        <div class="row">
            <div class="title">
                <H2>@Post.Header</h2>
            </div>
            <div class="col-6 body col">
                <div class="c vote">
                    <span class="oi oi-arrow-circle-top" aria-hidden="true"></span>
                    <p>12</p>
                    <span class="oi oi-arrow-circle-bottom " aria-hidden="true"></span>
                </div>
                <p>@(new MarkupString(Post.Body))</p>
            </div>
            <div class="col-6 last-column">
                <div class="photo-and-comments">
                    @if (Post.Image != null) {
                        <div class="photo-area">
                            <img src=@Post.Image>
                        </div>
                    }
                    <div class="comments-part ">
                        @if (Post.Comments != null) {
                            @foreach (Comment comment in Post.Comments) {
                                <CommentComponent Comment="comment"/>
                            }
                        }
                    </div>
                </div>
                <div class="writing-area">
                    <RadzenTextArea Style="resize: none;" Placeholder="Enter your comment..." MaxLength="144" @bind-Value="comment" onKeyPress="" Class="w-100" Disabled=@(isLoggedIn ? false : true)/>
                    <RadzenButton class="submit" Text="Submit" Click="Submit" Disabled=@(isLoggedIn ? false : true)></RadzenButton>
                </div>
            </div>
        </div>
    </RadzenCard>
}
else {
    <p>Loading...</p>
}

@code {
    public Post Post;
    public bool isLoggedIn;
    public User myUser;
    public string comment = "";
    
    [Parameter]
    public string postId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    
    private void Submit() {
        if (!this.comment.Equals("")) {
            Comment comment = new Comment(this.comment, myUser);
            postService.AddComment(postId, comment);
            this.comment = "";
            navMgr.NavigateTo($"/ShowPost/{postId}", true);
        }
    }
    
    
    protected override async Task OnInitializedAsync() {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        Post = await postService.GetPost(postId);
        if (!isLoggedIn) return;

        myUser = authService.MyUser;
    }
}