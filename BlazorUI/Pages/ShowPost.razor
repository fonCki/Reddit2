@page "/ShowPost/{postId}"
@using Application.Contracts
@using Entities.Model
@using Microsoft.AspNetCore.Components
@using System.Security.Claims
@inject IPostDAO postDao
@inject NavigationManager navMgr


<RadzenCard class="m-3">
    <div class="row">
        <div class="title">
            <H2>@Post.Header</h2>
        </div>

        <div class="col-6 body col">
                   <div class="c vote">
                        <span class="oi oi-arrow-circle-top" aria-hidden="true"></span>  
                        <p>12</p>
                        <span class="oi oi-arrow-circle-bottom " aria-hidden="true"></span>
                    </div>
            <RadzenHtmlEditor PlaceHolder="Text (optional)" @bind-Value=@Post.Body style="height: 500px; margin-bottom: 1rem;" Disabled="true" class="rz-html-editor">
                <RadzenHtmlEditorRemoveFormat/>
            </RadzenHtmlEditor>
        </div>
        <div class="col-6  col">
            @if (Post.Image != null) {
                <div class="photo-area" >
                    <img src=@Post.Image >
                </div>
            }
            <div class="comments-full col" style="@((Post.Image == null) ? "height: 100%" : "height: 50%")">
                <div class="comments-part ">
                    @foreach (Comment comment in Post.Comments) {
                        <CommentComponent Comment="comment"/>
                    }
                </div>
                <div class="writing-area">
                    <RadzenTextArea Style="resize: none;" Placeholder="Enter your comment..." MaxLength="144" @bind-Value="comment" onKeyPress="" Class="w-100" Disabled=@(isLoggedIn ? false : true)/>
                    <RadzenButton class="submit" Text="Submit" Click="Submit" Disabled=@(isLoggedIn ? false : true)></RadzenButton>
                </div>
            </div>
        </div>
    </div>
</RadzenCard>

@code {
    public Post Post;
    public bool isLoggedIn;
    public User myUser;
    public string comment = "";
    
    [Parameter]
    public string postId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    
    private void Submit() {
        if (!this.comment.Equals("")) {
            Comment comment = new Comment(this.comment, myUser);
            postDao.AddComent(postId, comment);
            this.comment = "";
            navMgr.NavigateTo($"/ShowPost/{postId}");
        }
    }
    
    
    protected override async Task OnInitializedAsync() {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        Post = await postDao.GetPost(postId);
        if (!isLoggedIn) return;
        
        myUser = new User(user.Identity.Name,
            user.Claims.First(c => "lastName".Equals(c.Type)).Value,
            user.Claims.First(c => "email".Equals(c.Type)).Value,
            (user.Claims.First(c => "pwd".Equals(c.Type))).Value,
            user.Claims.First(c => "photo".Equals(c.Type)).Value);
        
        
    }
}